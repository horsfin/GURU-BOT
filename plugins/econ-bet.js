let confirm = {}

async function handler(m, { conn, args }) {
  // Check if the user is already in a gamble.
  if (m.sender in confirm) {
    throw '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.'
  }

  try {
    let user = global.db.data.users[m.sender]
    let count = (args[0] && number(parseInt(args[0])) ? Math.max(parseInt(args[0]), 1) : /all/i.test(args[0]) ? Math.floor(user.exp) : 1) * 1

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏ –¥–æ 10000.
    if (count > 50000) {
      count = 50000
    }

    if (user.exp < count) {
      return m.reply('üíπ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ xp.')
    }

    if (!(m.sender in confirm)) {
      confirm[m.sender] = {
        sender: m.sender,
        count,
        timeout: setTimeout(() => (m.reply('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ.'), delete confirm[m.sender]), 60000)
      }

      let txt = `–í—ã –≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É? –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'. \n\n–°—É–º–º–∞: ${count} üíπ\n–£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç.`
      return conn.sendMessage(m.chat, { text: txt, quoted: m, contextInfo: { mentionedJid: [m.sender] } });
    }
  } catch (e) {
    console.error(e)
    if (m.sender in confirm) {
      let { timeout } = confirm[m.sender]
      clearTimeout(timeout)
      delete confirm[m.sender]
      m.reply('–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.')
    }
  }
}

handler.before = async m => {
  if (!(m.sender in confirm)) return
  if (m.isBaileys) return

  let { timeout, count } = confirm[m.sender]
  let user = global.db.data.users[m.sender]
  let initialMoney = user.exp * 1
  let txt = (m.msg && m.msg.selectedDisplayText ? m.msg.selectedDisplayText : m.text ? m.text : '').toLowerCase()

  try {
    if (/^(‚úîÔ∏è|–¥(–∞|a))?$/i.test(txt)) {
      let botScore = (Math.ceil(Math.random() * 51)) * 1  // Random score for the bot (1 to 51)
      let playerScore = (Math.floor(Math.random() * 101)) * 1  // Random score for the player (1 to 100)
      let status = '–ø—Ä–æ–∏–≥—Ä–∞–ª–∏'

      if (botScore < playerScore) {
        user.exp += count * 1
        status = '–≤—ã–π–≥—Ä–∞–ª–∏'
      } else if (botScore > playerScore) {
        user.exp -= count * 1
      } else {
        status = 'draw'
        user.exp += Math.floor(count / 1.5) * 1
      }

      let result = `
      | *–ò–≥—Ä–æ–∫* | *–û—á–∫–∏* |
      *–ë–æ—Ç:*      ${botScore}
      *–í—ã:*    ${playerScore}
      –í—ã *${status}*. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.money} üíπ
          `.trim()

      m.reply(result)
      clearTimeout(timeout)
      delete confirm[m.sender]
      return true
    } else if (/^(‚úñÔ∏è|–Ω–µ—Ç)?$/i.test(txt)) {
      clearTimeout(timeout)
      delete confirm[m.sender]
      m.reply('–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
      return true
    }

  } catch (e) {
    clearTimeout(timeout)
    delete confirm[m.sender]

    // If money was lost due to an error, restore it.
    if (initialMoney > user.exp) user.exp = initialMoney

    m.reply('–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∞.')
    return true
  } finally {
    clearTimeout(timeout)
    delete confirm[m.sender]
    return true
  }
}

handler.help = ['bet [amount]']
handler.tags = ['rpg']
handler.command = /^(—Å—Ç–∞–≤–∫–∞)$/i

export default handler

/**
 * Detect if the input is a number
 * @param {Number} x
 * @returns Boolean
 */
function number(x = 0) {
  x = parseInt(x)
  return !isNaN(x) && typeof x == 'number'
}
