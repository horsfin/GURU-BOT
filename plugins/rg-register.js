//import db from '../lib/database.js'

import { createHash } from 'crypto'
let Reg = /\|?(.*)([.|] *?)([0-9]*)$/i
let handler = async function (m, { conn, text, usedPrefix, command }) {
  let user = global.db.data.users[m.sender]
  let name2 = conn.getName(m.sender)
  if (user.registered === true) throw `‚ú≥Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n üìå –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —á—Ç–æ-–±—ã —É–¥–∞–ª–∏—Ç—å –≤–∞—à—É —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é \n*${usedPrefix}—Ä–∞–∑—Ä–µ–≥* <—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä>`
  if (!Reg.test(text)) throw `‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ –∫–æ—Ä–µ–∫—Ç–µ–Ω\n\n ‚ú≥Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É: *${usedPrefix + command} –∏–º—è.–≤–æ–∑—Ä–∞—Å—Ç*\nüìå–ü—Ä–∏–º–µ—Ä : *${usedPrefix + command}* ${name2}.16`
  let [_, name, splitter, age] = text.match(Reg)
  if (!name) throw '‚ú≥Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
  if (!age) throw '‚ú≥Ô∏è –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
  if (name.length >= 30) throw '‚ú≥Ô∏è–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ' 
  age = parseInt(age)
  if (age > 100) throw 'üë¥üèª –ù–∏—á–µ–≥–æ —Å–µ–±–µ –¥–µ–¥ —Ö–æ—á–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º'
  if (age < 5) throw 'üöº —Ç—ã –µ—â—ë –º–∞–ª —á—Ç–æ-–±—ã —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è'
  user.name = name.trim()
  user.age = age
  user.regTime = + new Date
  user.registered = true
  let sn = createHash('md5').update(m.sender).digest('hex')
  m.reply(`
‚îå‚îÄ„Äå *–ó–ê–†–ï–ì–ï–°–¢–†–ò–†–û–í–ê–ù* „Äç‚îÄ
‚ñ¢ *–ò–ú–Ø:* ${name}
‚ñ¢ *–í–û–ó–†–ê–°–¢* : ${age} years
‚ñ¢ *–°–ï–†–ò–ô–ù–´–ô –ù–û–ú–ï–†* :${sn}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

 *${usedPrefix}help* –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é
`.trim())
}
handler.help = ['reg'].map(v => v + ' <name.age>')
handler.tags = ['rg']

handler.command = ['verify', '—Ä–µ–≥', 'register', 'registrar'] 

export default handler

