import TicTacToe from '../lib/tictactoe.js'

let handler = async (m, { conn, usedPrefix, command, text }) => {
    conn.game = conn.game ? conn.game : {}
    if (Object.values(conn.game).find(room => room.id.startsWith('tictactoe') && [room.game.playerX, room.game.playerO].includes(m.sender))) throw `‚ú≥Ô∏è –í—ã –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ, —á—Ç–æ-–±—ã —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –Ω–∞–ø–∏—à–∏—Ç–µ : *${usedPrefix}delttt*`
    if (!text) throw `‚ú≥Ô∏è –ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã`
    let room = Object.values(conn.game).find(room => room.state === '–æ–∂–∏–¥–∞–Ω–∏–µ' && (text ? room.name === text : true))
    // m.reply('[WIP Feature]')
    if (room) {
        m.reply('‚úÖ –ø–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞')
        room.o = m.chat
        room.game.playerO = m.sender
        room.state = '–ò–ì–†–ê'
        let arr = room.game.render().map(v => {
            return {
                X: '‚ùé',
                O: '‚≠ï',
                1: '1Ô∏è‚É£',
                2: '2Ô∏è‚É£',
                3: '3Ô∏è‚É£',
                4: '4Ô∏è‚É£',
                5: '5Ô∏è‚É£',
                6: '6Ô∏è‚É£',
                7: '7Ô∏è‚É£',
                8: '8Ô∏è‚É£',
                9: '9Ô∏è‚É£',
            }[v]
        })
        let str = `
–í –æ–∂–∏–¥–∞–Ω–∏–∏ @${room.game.currentTurn.split('@')[0]} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        
${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

‚ñ¢ *ID –ö–æ–º–Ω–∞—Ç—ã* ${room.id}

‚ñ¢ *–ü—Ä–∞–≤–∏–ª–∞*
‚Ä£ –°–æ—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –ø–æ –¥–∏–æ–≥–æ–Ω–∞–ª–∏,–≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏–ª–∏ –≤ —Ä—è–¥ —á—Ç–æ-–±—ã –ø–æ–±–µ–¥–∏—Ç—å ‚Ä£ –ù–∞–ø–∏—à–∏—Ç–µ *surrender* –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è.
`.trim()
        if (room.x !== room.o) await conn.reply(room.x, str, m, {
            mentions: conn.parseMention(str)
        })
        await conn.reply(room.o, str, m, {
            mentions: conn.parseMention(str)
        })
    } else {
        room = {
            id: 'tictactoe-' + (+new Date),
            x: m.chat,
            o: '',
            game: new TicTacToe(m.sender, 'o'),
            state: '–æ–∂–∏–¥–∞–Ω–∏–µ'
        }
        if (text) room.name = text
        
     conn.reply(m.chat, `‚è≥ *–æ–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞*\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É —á—Ç–æ-–±—ã –≤—Å—Ç—É–ø–∏—Ç—å
‚ñ¢ *${usedPrefix + command} ${text}*

üéÅ –ù–∞–≥—Ä–∞–¥–∞:  *4999 XP*`, m, {
            mentions: conn.parseMention(text)
        })
        
   conn.game[room.id] = room
    }
    
}

handler.help = ['tictactoe <tag number>']
handler.tags = ['game']
handler.command = ['tictactoe', 'ttc', 'ttt', 'xo']

export default handler
